#!/bin/bash

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# URL base da API
API_URL="http://localhost:8080/api"

# Fun√ß√£o para exibir t√≠tulo
show_title() {
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë              üõí SISTEMA E-COMMERCE HEXAGONAL                 ‚ïë"
    echo "‚ïë                Arquitetura Hexagonal (Ports & Adapters)      ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Fun√ß√£o para exibir menu
show_menu() {
    echo -e "${YELLOW}"
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    echo "‚îÇ                        MENU PRINCIPAL                        ‚îÇ"
    echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"
    echo "‚îÇ  1. üë• Listar usu√°rios cadastrados                           ‚îÇ"
    echo "‚îÇ  2. üë§ Cadastrar novo usu√°rio                                ‚îÇ"
    echo "‚îÇ  3. ‚úèÔ∏è  Atualizar usu√°rio                                    ‚îÇ"
    echo "‚îÇ  4. üóëÔ∏è  Deletar usu√°rio                                      ‚îÇ"
    echo "‚îÇ  5. üì¶ Listar produtos dispon√≠veis                           ‚îÇ"
    echo "‚îÇ  6. üÜï Cadastrar novo produto                                ‚îÇ"
    echo "‚îÇ  7. ‚úèÔ∏è  Atualizar produto                                    ‚îÇ"
    echo "‚îÇ  8. üóëÔ∏è  Deletar produto                                      ‚îÇ"
    echo "‚îÇ  9. üõí Criar novo pedido                                     ‚îÇ"
    echo "‚îÇ 10. üìä Visualizar pedidos existentes                         ‚îÇ"
    echo "‚îÇ 11. ‚úèÔ∏è  Atualizar pedido                                     ‚îÇ"
    echo "‚îÇ 12. üóëÔ∏è  Deletar pedido                                       ‚îÇ"
    echo "‚îÇ 13. üíö Verificar sa√∫de da API                                ‚îÇ"
    echo "‚îÇ 14. üìö Abrir documenta√ß√£o Swagger                            ‚îÇ"
    echo "‚îÇ  0. üö™ Sair                                                  ‚îÇ"
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo -e "${NC}"
}

# Fun√ß√£o para validar se a API est√° rodando
check_api() {
    echo -e "${BLUE}üîç Verificando se a API est√° rodando...${NC}"
    
    if curl -s "http://localhost:8080/health/ping" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ API est√° rodando!${NC}"
        return 0
    else
        echo -e "${RED}‚ùå API n√£o est√° rodando!${NC}"
        echo -e "${YELLOW}üí° Execute './run.sh' para iniciar a aplica√ß√£o${NC}"
        return 1
    fi
}

# Fun√ß√£o para listar usu√°rios
list_users() {
    echo -e "${BLUE}üë• Listando usu√°rios cadastrados...${NC}"
    
    response=$(curl -s "$API_URL/users")
    
    if [ $? -eq 0 ] && [ -n "$response" ]; then
        echo -e "${GREEN}‚úÖ Usu√°rios encontrados:${NC}"
        echo "$response" | jq -r '.[] | "ID: \(.id) | Nome: \(.name) | Email: \(.email)"'
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Nenhum usu√°rio cadastrado ou erro na consulta${NC}"
    fi
}

# Fun√ß√£o para cadastrar novo usu√°rio
register_user() {
    echo -e "${BLUE}üë§ Cadastrando novo usu√°rio...${NC}"
    
    read -p "Nome completo: " name
    read -p "Email: " email
    read -p "Senha: " password
    
    # Valida√ß√µes b√°sicas
    if [ -z "$name" ] || [ -z "$email" ] || [ -z "$password" ]; then
        echo -e "${RED}‚ùå Todos os campos s√£o obrigat√≥rios!${NC}"
        return 1
    fi
    
    # Validar tamanho da senha
    if [ ${#password} -lt 6 ]; then
        echo -e "${RED}‚ùå Senha deve ter pelo menos 6 caracteres!${NC}"
        return 1
    fi
    
    # Criar JSON
    json_data="{
        \"name\": \"$name\",
        \"email\": \"$email\",
        \"password\": \"$password\"
    }"
    
    # Enviar requisi√ß√£o
    response=$(curl -s -X POST "$API_URL/users" \
        -H "Content-Type: application/json" \
        -d "$json_data")
    
    if echo "$response" | jq -e '.id' > /dev/null 2>&1; then
        user_id=$(echo "$response" | jq -r '.id')
        echo -e "${GREEN}‚úÖ Usu√°rio cadastrado com sucesso!${NC}"
        echo -e "${CYAN}ID: $user_id${NC}"
        return 0
    else
        error_msg=$(echo "$response" | jq -r '.error // .message // "Erro desconhecido"')
        echo -e "${RED}‚ùå Erro ao cadastrar: $error_msg${NC}"
        return 1
    fi
}

# Fun√ß√£o para atualizar usu√°rio
update_user() {
    echo -e "${BLUE}‚úèÔ∏è  Atualizando usu√°rio...${NC}"
    
    # Listar usu√°rios primeiro
    list_users
    
    read -p "Digite o ID do usu√°rio: " user_id
    
    if [ -z "$user_id" ]; then
        echo -e "${RED}‚ùå ID √© obrigat√≥rio!${NC}"
        return 1
    fi
    
    read -p "Nome completo: " name
    read -p "Email: " email
    read -p "Senha: " password
    
    # Valida√ß√µes b√°sicas
    if [ -z "$name" ] || [ -z "$email" ] || [ -z "$password" ]; then
        echo -e "${RED}‚ùå Todos os campos s√£o obrigat√≥rios!${NC}"
        return 1
    fi
    
    # Validar tamanho da senha
    if [ ${#password} -lt 6 ]; then
        echo -e "${RED}‚ùå Senha deve ter pelo menos 6 caracteres!${NC}"
        return 1
    fi
    
    # Criar JSON
    json_data="{
        \"name\": \"$name\",
        \"email\": \"$email\",
        \"password\": \"$password\"
    }"
    
    # Enviar requisi√ß√£o
    response=$(curl -s -X PUT "$API_URL/users/$user_id" \
        -H "Content-Type: application/json" \
        -d "$json_data")
    
    if echo "$response" | jq -e '.id' > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Usu√°rio atualizado com sucesso!${NC}"
        echo -e "${CYAN}ID: $user_id${NC}"
        return 0
    else
        error_msg=$(echo "$response" | jq -r '.error // .message // "Erro desconhecido"')
        echo -e "${RED}‚ùå Erro ao atualizar: $error_msg${NC}"
        return 1
    fi
}

# Fun√ß√£o para deletar usu√°rio
delete_user() {
    echo -e "${BLUE}üóëÔ∏è  Deletando usu√°rio...${NC}"
    
    # Listar usu√°rios primeiro
    list_users
    
    read -p "Digite o ID do usu√°rio: " user_id
    
    if [ -z "$user_id" ]; then
        echo -e "${RED}‚ùå ID √© obrigat√≥rio!${NC}"
        return 1
    fi
    
    read -p "Tem certeza que deseja deletar o usu√°rio $user_id? (s/N): " confirm
    
    if [[ "$confirm" =~ ^[Ss]$ ]]; then
        # Enviar requisi√ß√£o
        response=$(curl -s -X DELETE "$API_URL/users/$user_id")
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Usu√°rio deletado com sucesso!${NC}"
            return 0
        else
            echo -e "${RED}‚ùå Erro ao deletar usu√°rio${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ùå Opera√ß√£o cancelada${NC}"
        return 1
    fi
}

# Fun√ß√£o para listar produtos
list_products() {
    echo -e "${BLUE}üì¶ Listando produtos dispon√≠veis...${NC}"
    
    response=$(curl -s "$API_URL/products")
    
    if [ $? -eq 0 ] && [ -n "$response" ]; then
        echo -e "${GREEN}‚úÖ Produtos encontrados:${NC}"
        echo "$response" | jq -r '.[] | "ID: \(.id) | Nome: \(.name) | Pre√ßo: R$ \(.price) | Estoque: \(.stockQuantity) | Descri√ß√£o: \(.description)"'
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Nenhum produto cadastrado ou erro na consulta${NC}"
    fi
}

# Fun√ß√£o para cadastrar novo produto
register_product() {
    echo -e "${BLUE}üÜï Cadastrando novo produto...${NC}"
    
    read -p "Nome do produto: " name
    read -p "Descri√ß√£o: " description
    read -p "Pre√ßo (ex: 99.99): " price
    read -p "Quantidade em estoque: " stock_quantity
    
    # Valida√ß√µes b√°sicas
    if [ -z "$name" ] || [ -z "$description" ] || [ -z "$price" ] || [ -z "$stock_quantity" ]; then
        echo -e "${RED}‚ùå Todos os campos s√£o obrigat√≥rios!${NC}"
        return 1
    fi
    
    # Validar se price √© um n√∫mero
    if ! [[ "$price" =~ ^[0-9]+\.?[0-9]*$ ]]; then
        echo -e "${RED}‚ùå Pre√ßo deve ser um n√∫mero v√°lido!${NC}"
        return 1
    fi
    
    # Validar se stock_quantity √© um n√∫mero
    if ! [[ "$stock_quantity" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}‚ùå Quantidade deve ser um n√∫mero inteiro!${NC}"
        return 1
    fi
    
    # Criar JSON
    json_data="{
        \"name\": \"$name\",
        \"description\": \"$description\",
        \"price\": $price,
        \"stockQuantity\": $stock_quantity
    }"
    
    # Enviar requisi√ß√£o
    response=$(curl -s -X POST "$API_URL/products" \
        -H "Content-Type: application/json" \
        -d "$json_data")
    
    if echo "$response" | jq -e '.id' > /dev/null 2>&1; then
        product_id=$(echo "$response" | jq -r '.id')
        echo -e "${GREEN}‚úÖ Produto cadastrado com sucesso!${NC}"
        echo -e "${CYAN}ID: $product_id${NC}"
        return 0
    else
        error_msg=$(echo "$response" | jq -r '.error // .message // "Erro desconhecido"')
        echo -e "${RED}‚ùå Erro ao cadastrar: $error_msg${NC}"
        return 1
    fi
}

# Fun√ß√£o para atualizar produto
update_product() {
    echo -e "${BLUE}‚úèÔ∏è  Atualizando produto...${NC}"
    
    # Listar produtos primeiro
    list_products
    
    read -p "Digite o ID do produto: " product_id
    
    if [ -z "$product_id" ]; then
        echo -e "${RED}‚ùå ID √© obrigat√≥rio!${NC}"
        return 1
    fi
    
    read -p "Nome do produto: " name
    read -p "Descri√ß√£o: " description
    read -p "Pre√ßo (ex: 99.99): " price
    read -p "Quantidade em estoque: " stock_quantity
    
    # Valida√ß√µes b√°sicas
    if [ -z "$name" ] || [ -z "$description" ] || [ -z "$price" ] || [ -z "$stock_quantity" ]; then
        echo -e "${RED}‚ùå Todos os campos s√£o obrigat√≥rios!${NC}"
        return 1
    fi
    
    # Validar se price √© um n√∫mero
    if ! [[ "$price" =~ ^[0-9]+\.?[0-9]*$ ]]; then
        echo -e "${RED}‚ùå Pre√ßo deve ser um n√∫mero v√°lido!${NC}"
        return 1
    fi
    
    # Validar se stock_quantity √© um n√∫mero
    if ! [[ "$stock_quantity" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}‚ùå Quantidade deve ser um n√∫mero inteiro!${NC}"
        return 1
    fi
    
    # Criar JSON
    json_data="{
        \"name\": \"$name\",
        \"description\": \"$description\",
        \"price\": $price,
        \"stockQuantity\": $stock_quantity
    }"
    
    # Enviar requisi√ß√£o
    response=$(curl -s -X PUT "$API_URL/products/$product_id" \
        -H "Content-Type: application/json" \
        -d "$json_data")
    
    if echo "$response" | jq -e '.id' > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Produto atualizado com sucesso!${NC}"
        echo -e "${CYAN}ID: $product_id${NC}"
        return 0
    else
        error_msg=$(echo "$response" | jq -r '.error // .message // "Erro desconhecido"')
        echo -e "${RED}‚ùå Erro ao atualizar: $error_msg${NC}"
        return 1
    fi
}

# Fun√ß√£o para deletar produto
delete_product() {
    echo -e "${BLUE}üóëÔ∏è  Deletando produto...${NC}"
    
    # Listar produtos primeiro
    list_products
    
    read -p "Digite o ID do produto: " product_id
    
    if [ -z "$product_id" ]; then
        echo -e "${RED}‚ùå ID √© obrigat√≥rio!${NC}"
        return 1
    fi
    
    read -p "Tem certeza que deseja deletar o produto $product_id? (s/N): " confirm
    
    if [[ "$confirm" =~ ^[Ss]$ ]]; then
        # Enviar requisi√ß√£o
        response=$(curl -s -X DELETE "$API_URL/products/$product_id")
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Produto deletado com sucesso!${NC}"
            return 0
        else
            echo -e "${RED}‚ùå Erro ao deletar produto${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ùå Opera√ß√£o cancelada${NC}"
        return 1
    fi
}

# Fun√ß√£o para selecionar usu√°rio
select_user() {
    echo -e "${BLUE}üë§ Selecionando usu√°rio para o pedido...${NC}"
    
    # Listar usu√°rios
    response=$(curl -s "$API_URL/users")
    
    if [ $? -ne 0 ] || [ -z "$response" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Nenhum usu√°rio cadastrado. Vamos cadastrar um novo!${NC}"
        register_user
        if [ $? -eq 0 ]; then
            # Buscar o usu√°rio rec√©m cadastrado
            response=$(curl -s "$API_URL/users")
        else
            return 1
        fi
    fi
    
    # Mostrar usu√°rios dispon√≠veis
    echo -e "${GREEN}üìã Usu√°rios dispon√≠veis:${NC}"
    echo "$response" | jq -r '.[] | "\(.id) | \(.name) | \(.email)"'
    
    echo -e "${YELLOW}Op√ß√µes:${NC}"
    echo "1. Selecionar usu√°rio existente"
    echo "2. Cadastrar novo usu√°rio"
    read -p "Escolha: " option
    
    case $option in
        1)
            read -p "Digite o ID do usu√°rio: " user_id
            # Validar se o ID existe
            if echo "$response" | jq -e ".[] | select(.id == $user_id)" > /dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ Usu√°rio selecionado!${NC}"
                return 0
            else
                echo -e "${RED}‚ùå ID inv√°lido!${NC}"
                return 1
            fi
            ;;
        2)
            register_user
            if [ $? -eq 0 ]; then
                # Buscar o usu√°rio rec√©m cadastrado
                response=$(curl -s "$API_URL/users")
                user_id=$(echo "$response" | jq -r '.[-1].id')
                echo -e "${GREEN}‚úÖ Novo usu√°rio selecionado!${NC}"
                return 0
            else
                return 1
            fi
            ;;
        *)
            echo -e "${RED}‚ùå Op√ß√£o inv√°lida!${NC}"
            return 1
            ;;
    esac
}

# Fun√ß√£o para selecionar produtos
select_products() {
    echo -e "${BLUE}üì¶ Selecionando produtos para o pedido...${NC}"
    
    # Listar produtos
    response=$(curl -s "$API_URL/products")
    
    if [ $? -ne 0 ] || [ -z "$response" ]; then
        echo -e "${RED}‚ùå Nenhum produto cadastrado!${NC}"
        echo -e "${YELLOW}üí° Cadastre produtos primeiro usando a op√ß√£o 6${NC}"
        return 1
    fi
    
    # Mostrar produtos dispon√≠veis
    echo -e "${GREEN}üì¶ Produtos dispon√≠veis:${NC}"
    echo "$response" | jq -r '.[] | "\(.id) | \(.name) | R$ \(.price) | Estoque: \(.stockQuantity)"'
    
    products_json="{}"
    
    while true; do
        echo -e "${YELLOW}Adicionar produto ao pedido:${NC}"
        read -p "Digite o ID do produto (ou '0' para finalizar): " product_id
        
        if [ "$product_id" = "0" ]; then
            break
        fi
        
        # Validar se o produto existe
        if echo "$response" | jq -e ".[] | select(.id == $product_id)" > /dev/null 2>&1; then
            read -p "Quantidade: " quantity
            
            if [[ "$quantity" =~ ^[0-9]+$ ]] && [ "$quantity" -gt 0 ]; then
                # Verificar estoque
                stock=$(echo "$response" | jq -r ".[] | select(.id == $product_id) | .stockQuantity")
                if [ "$quantity" -le "$stock" ]; then
                    # Adicionar produto ao JSON
                    products_json=$(echo "$products_json" | jq ". + {\"$product_id\": $quantity}")
                    echo -e "${GREEN}‚úÖ Produto adicionado!${NC}"
                else
                    echo -e "${RED}‚ùå Quantidade excede o estoque dispon√≠vel ($stock)${NC}"
                fi
            else
                echo -e "${RED}‚ùå Quantidade inv√°lida!${NC}"
            fi
        else
            echo -e "${RED}‚ùå ID de produto inv√°lido!${NC}"
        fi
    done
    
    # Verificar se h√° produtos no pedido
    product_count=$(echo "$products_json" | jq 'keys | length')
    if [ "$product_count" -eq 0 ]; then
        echo -e "${RED}‚ùå Pedido deve ter pelo menos um produto!${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Produtos selecionados: $product_count produto(s)${NC}"
    return 0
}

# Fun√ß√£o para criar pedido
create_order() {
    echo -e "${BLUE}üõí Criando novo pedido...${NC}"
    
    # Selecionar usu√°rio
    select_user
    if [ $? -ne 0 ]; then
        return 1
    fi
    
    # Selecionar produtos
    select_products
    if [ $? -ne 0 ]; then
        return 1
    fi
    
    # Criar JSON do pedido
    order_json="{
        \"userId\": $user_id,
        \"productQuantities\": $products_json
    }"
    
    echo -e "${YELLOW}üìã Resumo do pedido:${NC}"
    echo "$order_json" | jq '.'
    
    read -p "Confirmar pedido? (s/N): " confirm
    
    if [[ "$confirm" =~ ^[Ss]$ ]]; then
        # Enviar requisi√ß√£o
        response=$(curl -s -X POST "$API_URL/orders" \
            -H "Content-Type: application/json" \
            -d "$order_json")
        
        if echo "$response" | jq -e '.id' > /dev/null 2>&1; then
            order_id=$(echo "$response" | jq -r '.id')
            total_amount=$(echo "$response" | jq -r '.totalAmount')
            echo -e "${GREEN}‚úÖ Pedido criado com sucesso!${NC}"
            echo -e "${CYAN}ID do Pedido: $order_id${NC}"
            echo -e "${CYAN}Valor Total: R$ $total_amount${NC}"
            
            # Mostrar detalhes do pedido
            echo -e "${BLUE}üìã Detalhes do pedido:${NC}"
            echo "$response" | jq -r '.'
        else
            error_msg=$(echo "$response" | jq -r '.error // .message // "Erro desconhecido"')
            echo -e "${RED}‚ùå Erro ao criar pedido: $error_msg${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ùå Pedido cancelado${NC}"
        return 1
    fi
}

# Fun√ß√£o para visualizar pedidos
view_orders() {
    echo -e "${BLUE}üìä Visualizando pedidos existentes...${NC}"
    
    response=$(curl -s "$API_URL/orders")
    
    if [ $? -eq 0 ] && [ -n "$response" ]; then
        echo -e "${GREEN}‚úÖ Pedidos encontrados:${NC}"
        echo "$response" | jq -r '.[] | "ID: \(.id) | Usu√°rio: \(.user.name) | Status: \(.status) | Total: R$ \(.totalAmount) | Data: \(.createdAt)"'
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Nenhum pedido encontrado${NC}"
    fi
}

# Fun√ß√£o para atualizar pedido
update_order() {
    echo -e "${BLUE}‚úèÔ∏è  Atualizando pedido...${NC}"
    
    # Listar pedidos primeiro
    view_orders
    
    read -p "Digite o ID do pedido: " order_id
    
    if [ -z "$order_id" ]; then
        echo -e "${RED}‚ùå ID √© obrigat√≥rio!${NC}"
        return 1
    fi
    
    # Selecionar usu√°rio
    select_user
    if [ $? -ne 0 ]; then
        return 1
    fi
    
    # Selecionar produtos
    select_products
    if [ $? -ne 0 ]; then
        return 1
    fi
    
    # Criar JSON do pedido
    order_json="{
        \"userId\": $user_id,
        \"productQuantities\": $products_json
    }"
    
    echo -e "${YELLOW}üìã Resumo da atualiza√ß√£o:${NC}"
    echo "$order_json" | jq '.'
    
    read -p "Confirmar atualiza√ß√£o? (s/N): " confirm
    
    if [[ "$confirm" =~ ^[Ss]$ ]]; then
        # Enviar requisi√ß√£o
        response=$(curl -s -X PUT "$API_URL/orders/$order_id" \
            -H "Content-Type: application/json" \
            -d "$order_json")
        
        if echo "$response" | jq -e '.id' > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Pedido atualizado com sucesso!${NC}"
            echo -e "${CYAN}ID: $order_id${NC}"
            
            # Mostrar detalhes do pedido
            echo -e "${BLUE}üìã Detalhes do pedido:${NC}"
            echo "$response" | jq -r '.'
        else
            error_msg=$(echo "$response" | jq -r '.error // .message // "Erro desconhecido"')
            echo -e "${RED}‚ùå Erro ao atualizar: $error_msg${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ùå Atualiza√ß√£o cancelada${NC}"
        return 1
    fi
}

# Fun√ß√£o para deletar pedido
delete_order() {
    echo -e "${BLUE}üóëÔ∏è  Deletando pedido...${NC}"
    
    # Listar pedidos primeiro
    view_orders
    
    read -p "Digite o ID do pedido: " order_id
    
    if [ -z "$order_id" ]; then
        echo -e "${RED}‚ùå ID √© obrigat√≥rio!${NC}"
        return 1
    fi
    
    read -p "Tem certeza que deseja deletar o pedido $order_id? (s/N): " confirm
    
    if [[ "$confirm" =~ ^[Ss]$ ]]; then
        # Enviar requisi√ß√£o
        response=$(curl -s -X DELETE "$API_URL/orders/$order_id")
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Pedido deletado com sucesso!${NC}"
            return 0
        else
            echo -e "${RED}‚ùå Erro ao deletar pedido${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ùå Opera√ß√£o cancelada${NC}"
        return 1
    fi
}

# Fun√ß√£o para verificar sa√∫de da API
check_health() {
    echo -e "${BLUE}üíö Verificando sa√∫de da API...${NC}"
    
    # Health geral
    echo -e "${CYAN}üìä Status Geral:${NC}"
    health_response=$(curl -s "http://localhost:8080/health")
    echo "$health_response" | jq '.'
    
    echo
    
    # Health do banco de dados
    echo -e "${CYAN}üóÑÔ∏è Status do Banco de Dados:${NC}"
    db_health_response=$(curl -s "http://localhost:8080/health/database")
    echo "$db_health_response" | jq '.'
    
    echo
    
    # Ping
    echo -e "${CYAN}üèì Ping:${NC}"
    ping_response=$(curl -s "http://localhost:8080/health/ping")
    echo "$ping_response" | jq '.'
}

# Fun√ß√£o para abrir documenta√ß√£o Swagger
open_swagger() {
    echo -e "${BLUE}üìö Abrindo documenta√ß√£o Swagger...${NC}"
    echo -e "${CYAN}üåê URL: http://localhost:8080/swagger-ui.html${NC}"
    echo -e "${YELLOW}üí° Abra o link acima no seu navegador${NC}"
    # Tentar abrir no navegador automaticamente
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        open "http://localhost:8080/swagger-ui.html"
    elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
        # Windows
        start "http://localhost:8080/swagger-ui.html"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        xdg-open "http://localhost:8080/swagger-ui.html" || \
        sensible-browser "http://localhost:8080/swagger-ui.html" || \
        x-www-browser "http://localhost:8080/swagger-ui.html"
    fi
}

# Fun√ß√£o principal
main() {
    show_title
    
    # Verificar se a API est√° rodando
    if ! check_api; then
        exit 1
    fi
    
    while true; do
        echo
        show_menu
        read -p "Escolha uma op√ß√£o: " choice
        
        case $choice in
            1)
                list_users
                ;;
            2)
                register_user
                ;;
            3)
                update_user
                ;;
            4)
                delete_user
                ;;
            5)
                list_products
                ;;
            6)
                register_product
                ;;
            7)
                update_product
                ;;
            8)
                delete_product
                ;;
            9)
                create_order
                ;;
            10)
                view_orders
                ;;
            11)
                update_order
                ;;
            12)
                delete_order
                ;;
            13)
                check_health
                ;;
            14)
                open_swagger
                ;;
            0)
                echo -e "${GREEN}üëã Obrigado por usar o Sistema E-commerce Hexagonal!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå Op√ß√£o inv√°lida!${NC}"
                ;;
        esac
        
        echo
        read -p "Pressione ENTER para continuar..."
    done
}

# Executar fun√ß√£o principal
main 